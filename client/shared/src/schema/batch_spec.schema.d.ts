/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type OnQueryOrRepository = OnQuery | OnRepository;

/**
 * A batch specification, which describes the batch change and what kinds of changes to make (or what existing changesets to track).
 */
export interface BatchSpec {
  /**
   * The name of the batch change, which is unique among all batch changes in the namespace. A batch change's name is case-preserving.
   */
  name: string;
  /**
   * The description of the batch change.
   */
  description?: string;
  /**
   * The set of repositories (and branches) to run the batch change on, specified as a list of search queries (that match repositories) and/or specific repositories.
   */
  on?: OnQueryOrRepository[] | null;
  /**
   * Individual workspace configurations for one or more repositories that define which workspaces to use for the execution of steps in the repositories.
   */
  workspaces?: WorkspaceConfiguration[] | null;
  /**
   * The sequence of commands to run (for each repository branch matched in the `on` property) to produce the workspace changes that will be included in the batch change.
   */
  steps?: Step[] | null;
  /**
   * Optional transformations to apply to the changes produced in each repository.
   */
  transformChanges?: {
    /**
     * A list of groups of changes in a repository that each create a separate, additional changeset for this repository, with all ungrouped changes being in the default changeset.
     */
    group?: TransformChangesGroup[] | null;
  } | null;
  /**
   * Import existing changesets on code hosts.
   */
  importChangesets?:
    | {
        /**
         * The repository name as configured on your Sourcegraph instance.
         */
        repository: string;
        /**
         * The changesets to import from the code host. For GitHub this is the PR number, for GitLab this is the MR number, for Bitbucket Server this is the PR number.
         */
        externalIDs: (string | number)[] | null;
      }[]
    | null;
  /**
   * A template describing how to create (and update) changesets with the file changes produced by the command steps.
   */
  changesetTemplate?: {
    /**
     * The title of the changeset.
     */
    title: string;
    /**
     * The body (description) of the changeset.
     */
    body?: string;
    /**
     * The name of the Git branch to create or update on each repository with the changes.
     */
    branch: string;
    commit: ExpandedGitCommitDescription;
    /**
     * Whether to publish the changeset. An unpublished changeset can be previewed on Sourcegraph by any person who can view the batch change, but its commit, branch, and pull request aren't created on the code host. A published changeset results in a commit, branch, and pull request being created on the code host. If omitted, the publication state is controlled from the Batch Changes UI.
     */
    published?:
      | null
      | (boolean | string)
      | {
          [k: string]: boolean | string;
        }[];
  };
}
/**
 * A Sourcegraph search query that matches a set of repositories (and branches). Each matched repository branch is added to the list of repositories that the batch change will be run on.
 */
export interface OnQuery {
  /**
   * A Sourcegraph search query that matches a set of repositories (and branches). If the query matches files, symbols, or some other object inside a repository, the object's repository is included.
   */
  repositoriesMatchingQuery: string;
}
/**
 * A specific repository (and branch) that is added to the list of repositories that the batch change will be run on.
 */
export interface OnRepository {
  /**
   * The name of the repository (as it is known to Sourcegraph).
   */
  repository: string;
  /**
   * The branch on the repository to propose changes to. If unset, the repository's default branch is used.
   */
  branch?: string;
}
/**
 * Configuration for how to setup workspaces in repositories
 */
export interface WorkspaceConfiguration {
  /**
   * The name of the file that sits at the root of the desired workspace.
   */
  rootAtLocationOf: string;
  /**
   * The repositories in which to apply the workspace configuration. Supports globbing.
   */
  in?: string;
  /**
   * If this is true only the files in the workspace (and additional .gitignore) are downloaded instead of an archive of the full repository.
   */
  onlyFetchWorkspace?: boolean;
}
/**
 * A command to run (as part of a sequence) in a repository branch to produce the required changes.
 */
export interface Step {
  /**
   * The shell command to run in the container. It can also be a multi-line shell script. The working directory is the root directory of the repository checkout.
   */
  run: string;
  /**
   * The Docker image used to launch the Docker container in which the shell command is run.
   */
  container: string;
  /**
   * Output variables of this step that can be referenced in the changesetTemplate or other steps via outputs.<name-of-output>
   */
  outputs?: {
    [k: string]: OutputVariable;
  } | null;
  /**
   * Environment variables to set in the step environment.
   */
  env?:
    | null
    | {
        [k: string]: string;
      }
    | (
        | string
        | {
            [k: string]: string;
          }
      )[];
  /**
   * Files that should be mounted into or be created inside the Docker container.
   */
  files?: {
    [k: string]: string;
  } | null;
  /**
   * A condition to check before executing steps. Supports templating. The value 'true' is interpreted as true.
   */
  if?: boolean | string | null;
}
export interface OutputVariable {
  /**
   * The value of the output, which can be a template string.
   */
  value: string;
  /**
   * The expected format of the output. If set, the output is being parsed in that format before being stored in the var. If not set, 'text' is assumed to the format.
   */
  format?: "json" | "yaml" | "text";
  [k: string]: unknown;
}
export interface TransformChangesGroup {
  /**
   * The directory path (relative to the repository root) of the changes to include in this group.
   */
  directory: string;
  /**
   * The branch on the repository to propose changes to. If unset, the repository's default branch is used.
   */
  branch: string;
  /**
   * Only apply this transformation in the repository with this name (as it is known to Sourcegraph).
   */
  repository?: string;
}
/**
 * The Git commit to create with the changes.
 */
export interface ExpandedGitCommitDescription {
  /**
   * The Git commit message.
   */
  message: string;
  author?: GitCommitAuthor;
}
/**
 * The author of the Git commit.
 */
export interface GitCommitAuthor {
  /**
   * The Git commit author name.
   */
  name: string;
  /**
   * The Git commit author email.
   */
  email: string;
}
